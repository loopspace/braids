% \iffalse meta-comment
%<*internal>
\iffalse
%</internal>
%<*readme>
----------------------------------------------------------------
braids --- a style file for drawing braid diagrams with TikZ/PGF
E-mail: stacey@math.ntnu.no
Released under the LaTeX Project Public License v1.3c or later
See http://www.latex-project.org/lppl.txt
----------------------------------------------------------------

This package defines some commands for drawing braid diagrams with TikZ/PGF.
%</readme>
%<*internal>
\fi
\def\nameofplainTeX{plain}
\ifx\fmtname\nameofplainTeX\else
  \expandafter\begingroup
\fi
%</internal>
%<*install>
\input docstrip.tex
\keepsilent
\askforoverwritefalse
\preamble
----------------------------------------------------------------
braids --- a style file for drawing braid diagrams with TikZ/PGF
E-mail: stacey@math.ntnu.no
Released under the LaTeX Project Public License v1.3c or later
See http://www.latex-project.org/lppl.txt
----------------------------------------------------------------

\endpreamble
\postamble

Copyright (C) 2011 by Andrew Stacey <stacey@math.ntnu.no>

This work may be distributed and/or modified under the
conditions of the LaTeX Project Public License (LPPL), either
version 1.3c of this license or (at your option) any later
version.  The latest version of this license is in the file:

http://www.latex-project.org/lppl.txt

This work is "maintained" (as per LPPL maintenance status) by
Andrew Stacey.

This work consists of the file  braids.dtx
and the derived files           braids.ins,
                                braids.pdf, and
                                braids.sty.

\endpostamble
\usedir{tex/latex/braids}
\generate{
  \file{\jobname.sty}{\from{\jobname.dtx}{package}}
}
%</install>
%<install>\endbatchfile
%<*internal>
\usedir{source/latex/braids}
\generate{
  \file{\jobname.ins}{\from{\jobname.dtx}{install}}
}
\nopreamble\nopostamble
\usedir{doc/latex/demopkg}
\generate{
  \file{README.txt}{\from{\jobname.dtx}{readme}}
}
\ifx\fmtname\nameofplainTeX
  \expandafter\endbatchfile
\else
  \expandafter\endgroup
\fi
%</internal>
%<*package>
\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{braids}[2011/05/07 v1.0 Tikz/PGF commands for drawing braid diagrams]
%</package>
%<*driver>
\documentclass{ltxdoc}
\usepackage[T1]{fontenc}
\usepackage{lmodern}
%\usepackage{morefloats}
\usepackage{tikz}
\usepackage{\jobname}
\usepackage[numbered]{hypdoc}
\definecolor{lstbgcolor}{rgb}{0.9,0.9,0.9} 
 
\usepackage{listings}
\lstloadlanguages{[LaTeX]TeX}
\lstset{breakatwhitespace=true,breaklines=true,language=TeX}
 
\usepackage{fancyvrb}

\newenvironment{example}
  {\VerbatimEnvironment
   \begin{VerbatimOut}[gobble=2]{example.out}}
  {\end{VerbatimOut}
   \begin{center}
%   \setlength{\parindent}{0pt}
   \fbox{\begin{minipage}{.9\linewidth}
     \lstset{breakatwhitespace=true,breaklines=true,language=TeX,basicstyle=\small}
     \lstinputlisting[]{example.out}
   \end{minipage}}

   \fbox{\begin{minipage}{.9\linewidth}
     \input{example.out}
   \end{minipage}}
\end{center}
}
\EnableCrossrefs
\CodelineIndex
\RecordChanges
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
%
% \CharacterTable
%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%   Digits        \0\1\2\3\4\5\6\7\8\9
%   Exclamation   \!     Double quote  \"     Hash (number) \#
%   Dollar        \$     Percent       \%     Ampersand     \&
%   Acute accent  \'     Left paren    \(     Right paren   \)
%   Asterisk      \*     Plus          \+     Comma         \,
%   Minus         \-     Point         \.     Solidus       \/
%   Colon         \:     Semicolon     \;     Less than     \<
%   Equals        \=     Greater than  \>     Question mark \?
%   Commercial at \@     Left bracket  \[     Backslash     \\
%   Right bracket \]     Circumflex    \^     Underscore    \_
%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%   Right brace   \}     Tilde         \~}
%
%
% \changes{1.0}{2011/05/03}{Converted to DTX file}
%
% \DoNotIndex{\newcommand,\newenvironment}
%
% \providecommand*{\url}{\texttt}
% \GetFileInfo{brqids.dtx}
% \title{The \textsf{braids} package}
% \author{Andrew Stacey \\ \url{stacey@math.ntnu.no}}
% \date{\fileversion~from \filedate}
% 
% \maketitle
% 
% \begin{center}
% \begin{tikzpicture}
% \braid[line width=3pt,line cap=round,style strand={1}{blue},number of strands=7] s_1 s_2 s_5^{-1};
% \end{tikzpicture}
% \end{center}
% 
% \section{Introduction}
% 
% This is a package for drawing braid diagrams using PGF/TikZ.
% An example follows.
% 
% %\begin{example}
% \begin{center}
% \begin{tikzpicture}[rotate=90]
% \braid[style strand={1}{red},style strand={2}{blue},style strand={3}{green}] s_1 s_2^{-1} s_1 s_2^{-1} s_1 s_2^{-1};
% \end{tikzpicture}
% \end{center}
% %\end{example}
% 
% \section{Usage}
% 
% \DescribeMacro{\braid}
% A braid is specified by the command \Verb+\braid+.
% The syntax for this command is as follows:
% 
% \Verb+\braid[style options] braid word;+
% 
% The \Verb+braid word+ is an expression in the braid group, such as \Verb+s_1 s_2^{-1}+.
% The generator labels are not significant.
% The exponent can be \Verb+1+, \Verb+{-1}+, or missing (in which case it defaults to \Verb+1+).
% 
% The \Verb+style options+ set the style for the braid strands.
% They can be grouped into three types: options that set up the main parameters for the braid, options that set the default style for the strands, and options that set up styles for individual strands.
% The options are as follows.
% 
% \subsection{Global Options}
% 
% \DescribeMacro{number of strands} The key \Verb+number of strands+ sets the minimum number of strands for the braid.
% The number of strands will grow according to the terms in the braid word so this merely sets a lower bound.
% If not set, the number of strands will be determined by the terms in the braid word.
% 
% \DescribeMacro{height}
% The key \Verb+height+ sets the height of the piece of the braid corresponding to an element in the group.
% 
% \DescribeMacro{width}
% The key \Verb+width+ sets the separation of the strands in the braid.
% 
% \DescribeMacro{border height}
% The key \Verb+border height+ adds a little extra length to the strands at the start and end of the braid.
% 
% \DescribeMacro{style strand}
% The style of the strands are controlled by two types of option.
% Style options that are set on the \Verb+\braid+ command are passed to every strand.
% It is also possible to add style options to individual strands using the key \Verb+style strand+.
% This takes two options, a strand number and a list of options to be applied to that strand.
% Thus, the syntax is \Verb+style strand={n}{options}+.
% The strands are numbered by their starting position.
% Not all of the standard TikZ style options are possible due to the way that the strands are constructed.
% Basically, the options that are allowed are those that do not require changing the path or drawing it more than once.
% 
% \StopEventually{}
%
% \section{Implementation}
%
% \iffalse
%<*package>
% \fi
%
%    \begin{macrocode}
\def\braid{%
  \begingroup
  \braid@start}

\def\braid@process{%
  \@ifnextchar;{\braid@render}{\braid@@process}}

\def\braid@@process{%
  \@ifnextchar^{\braid@sup}{%
    \@ifnextchar_{\braid@sub}{%
      \@ifnextchar-{\braid@minus}{%
        \@ifnextchar[{\braid@process@options}{%
            \@ifnextchar|{\braid@draw@floor}{%
              \braid@addto@label
            }%
          }%]
        }%
      }%
    }%
  }

\def\braid@draw@floor|{%
    \edef\braid@tmp{,\expandafter\the\value{braid@level}}%
      \expandafter\g@addto@macro\expandafter\braid@floors\expandafter{\braid@tmp}%
    \braid@process
}

\def\braid@process@options[#1]{%
    \tikzset{#1}%
  \braid@process}

\def\braid@minus-{\braid@increase@levelfalse\braid@process}

\def\braid@sup^#1_#2{\g@addto@macro\braid@label{_{#2}^{#1}}\braid@add@crossing{#2}{#1}}

\def\braid@sub_#1{\@ifnextchar^{\braid@@sub{#1}}{\g@addto@macro\braid@label{_{#1}}\braid@add@crossing{#1}{1}}}

\def\braid@@sub#1^#2{\g@addto@macro\braid@label{_{#1}^{#2}}\braid@add@crossing{#1}{#2}}

\def\braid@ne{1}

\def\braid@add@crossing#1#2{%
  \edef\braid@crossing@type{#2}
  \edef\braid@this@strand{#1}
  \pgfmathtruncatemacro{\braid@next@strand}{#1+1}

% increment the counter, if requested
  \ifbraid@increase@level
  \stepcounter{braid@level}
  \fi
% request increment next time
  \braid@increase@leveltrue

% Coordinates of crossing
  \braid@tx=\braid@this@strand\braid@width
  \braid@ty=\value{braid@level}\braid@height
  \advance\braid@ty by \braid@eh
  \braid@nx=\braid@tx
  \braid@ny=\braid@ty
  \advance\braid@nx by \braid@width
  \advance\braid@ny by \braid@height
  \braid@cy=\braid@ty
  \braid@dy=\braid@ny
  \advance\braid@cy by .5\braid@height
  \advance\braid@dy by -.5\braid@height
  \advance\braid@ty by .05\braid@height
  \advance\braid@ny by -.05\braid@height

% Try to find a starting point for the strand ending here
  \expandafter\let\expandafter\braid@this@path@origin\csname braid@strand@\braid@this@strand @origin\endcsname

\ifx\braid@this@path@origin\relax
  % Haven't seen this strand before, so initialise it
  % Record the initial position of the strand
  \let\braid@this@path@origin\braid@this@strand
  % start a new soft path
  \pgfsyssoftpath@setcurrentpath{\@empty}
  \pgfpathmoveto{\pgfpoint{\braid@tx}{0pt}}
  % save the path
  \pgfsyssoftpath@getcurrentpath{\braid@this@path}
  \else
  \expandafter\let\expandafter\braid@this@path\csname braid@strand@\braid@this@path@origin\endcsname
  \fi

% Try to find a starting point for the next strand ending here
  \expandafter\let\expandafter\braid@next@path@origin\csname braid@strand@\braid@next@strand @origin\endcsname

  \ifx\braid@next@path@origin\relax
  % Haven't seen this strand before, so initialise it
  % Record the initial position of the strand
  \let\braid@next@path@origin\braid@next@strand
  % start a new soft path
  \pgfsyssoftpath@setcurrentpath{\@empty}
  \pgfpathmoveto{\pgfpoint{\braid@nx}{0pt}}
  % save the path
  \pgfsyssoftpath@getcurrentpath{\braid@next@path}
  \else
  \expandafter\let\expandafter\braid@next@path\csname braid@strand@\braid@next@path@origin\endcsname
  \fi

  % Start with the first path
  \pgfsyssoftpath@setcurrentpath{\braid@this@path}
  % Draw a line down to the current level
  \pgfpathlineto{\pgfqpoint{\braid@tx}{\braid@ty}}
  % Curve across to the next position
\ifx\braid@crossing@type\braid@over@cross
\pgfpathcurveto{\pgfqpoint{\braid@tx}{\braid@cy}}{\pgfqpoint{\braid@nx}{\braid@dy}}{\pgfqpoint{\braid@nx}{\braid@ny}}
\else
\pgfpathcurvebetweentimecontinue{0}{.4}{\pgfqpoint{\braid@tx}{\braid@ty}}{\pgfqpoint{\braid@tx}{\braid@cy}}{\pgfqpoint{\braid@nx}{\braid@dy}}{\pgfqpoint{\braid@nx}{\braid@ny}}
\pgfpathcurvebetweentime{.6}{1}{\pgfqpoint{\braid@tx}{\braid@ty}}{\pgfqpoint{\braid@tx}{\braid@cy}}{\pgfqpoint{\braid@nx}{\braid@dy}}{\pgfqpoint{\braid@nx}{\braid@ny}}
\fi
    % Save the path
  \pgfsyssoftpath@getcurrentpath{\braid@this@path}

  % Now do the same with the second path
  \pgfsyssoftpath@setcurrentpath{\braid@next@path}
  % Draw a line down to the current level
  \pgfpathlineto{\pgfqpoint{\braid@nx}{\braid@ty}}
  % Curve across to the previous position
\ifx\braid@crossing@type\braid@over@cross
\pgfpathcurvebetweentimecontinue{0}{.4}{\pgfqpoint{\braid@nx}{\braid@ty}}{\pgfqpoint{\braid@nx}{\braid@cy}}{\pgfqpoint{\braid@tx}{\braid@dy}}{\pgfqpoint{\braid@tx}{\braid@ny}}
\pgfpathcurvebetweentime{.6}{1}{\pgfqpoint{\braid@nx}{\braid@ty}}{\pgfqpoint{\braid@nx}{\braid@cy}}{\pgfqpoint{\braid@tx}{\braid@dy}}{\pgfqpoint{\braid@tx}{\braid@ny}}
\else
  \pgfpathcurveto{\pgfqpoint{\braid@nx}{\braid@cy}}{\pgfqpoint{\braid@tx}{\braid@dy}}{\pgfqpoint{\braid@tx}{\braid@ny}}
\fi
  % Save the path
  \pgfsyssoftpath@getcurrentpath{\braid@next@path}

% Now save the paths again
  \expandafter\let\csname braid@strand@\braid@this@path@origin \endcsname\braid@this@path
  \expandafter\let\csname braid@strand@\braid@next@path@origin \endcsname\braid@next@path

  % Now update the origins
  \expandafter\let\csname braid@strand@\braid@this@strand @origin\endcsname\braid@next@path@origin
  \expandafter\let\csname braid@strand@\braid@next@strand @origin\endcsname\braid@this@path@origin

% increment the strand counter, if necessary
  \pgfmathparse{\value{braid@strands} < \braid@next@strand ? "\noexpand\setcounter{braid@strands}{\braid@next@strand}" : ""}
  \pgfmathresult
  \braid@process
}

\def\braid@addto@label#1{%
  \g@addto@macro\braid@label{#1}%
  \braid@process}

\def\braid@floors@trim,{}

\def\braid@render@floor{%
    \draw (\braidbx,\braidby) rectangle (\braidex,\braidey);
}

\def\braid@render{
    \ifx\braid@floors\@empty
    \else
    \pgfsys@beginscope
    \pgfsyssoftpath@setcurrentpath{\empty}
    \edef\braid@floors{\expandafter\braid@floors@trim\braid@floors}
    \braid@tx=\braid@width
    \advance\braid@tx by \braid@eh
    \braid@nx=\value{braid@strands}\braid@width
    \advance\braid@nx by -\braid@eh
    \foreach \braid@f in \braid@floors {
      \pgfsys@beginscope
      \braid@ty=\braid@f\braid@height
      \advance\braid@ty by \braid@eh
      \advance\braid@ty by \braid@height
      \braid@ny=\braid@ty
      \advance\braid@ny by \braid@height
      \edef\braidsx{\the\braid@tx}
      \edef\braidsy{\the\braid@ty}
      \edef\braidex{\the\braid@nx}
      \edef\braidey{\the\braid@ny}
      \let\tikz@options=\pgfutil@empty
% Load general floor style options
    \expandafter\tikzset\expandafter{\braid@floors@style}
% Load any style options specific to this floor
      \pgfmathtruncatemacro{\braid@ff}{\braid@f+2}
    \expandafter\let\expandafter\braid@floor@style\csname braid@options@floor@\braid@ff\endcsname
    \ifx\braid@floor@style\relax
    \else
    \expandafter\tikzset\expandafter{\braid@floor@style}
    \fi
\tikz@options
      \braid@render@floor
\pgfsys@endscope
    }
    \pgfsys@endscope
    \fi
  \stepcounter{braid@level}
  \foreach \braid@k in {1,...,\value{braid@strands}} {
% Start a local scope to ensure we don't mess with other braids
    \pgfsys@beginscope
% Default is to draw each braid
    \tikz@mode@drawtrue%
    \let\tikz@mode=\pgfutil@empty
    \let\tikz@options=\pgfutil@empty
% (x,y) coordinates of bottom of strand
    \braid@tx=\braid@k\braid@width
    \braid@ty=\value{braid@level}\braid@height
    \advance\braid@ty by 2\braid@eh
% Try to find the starting point of this strand
    \expandafter\let\expandafter\braid@path@origin\csname braid@strand@\braid@k @origin\endcsname
    \ifx\braid@path@origin\relax
% If that doesn't exist, we'll just draw a straight line
% so we move to the top of the current position
    \pgfsyssoftpath@setcurrentpath{\@empty}
    \pgfpathmoveto{\pgfqpoint{\braid@tx}{0pt}}
    \let\braid@path@origin\braid@k
    \else
% If the path does exist, we load it
    \expandafter\let\expandafter\braid@path\csname braid@strand@\braid@path@origin\endcsname
    \pgfsyssoftpath@setcurrentpath{\braid@path}
    \fi
% Extend the path to the bottom
    \pgflineto{\pgfqpoint{\braid@tx}{\braid@ty}}
% Load common style options
    \expandafter\tikzset\expandafter{\braid@style}
% Load any style options specific to this strand
    \expandafter\let\expandafter\braid@style\csname braid@options@strand@\braid@path@origin\endcsname
    \ifx\braid@style\relax
    \else
    \expandafter\tikzset\expandafter{\braid@style}
    \fi
\braid@options
    \tikz@mode
    \tikz@options
      \edef\tikz@temp{\noexpand\pgfusepath{%
          \iftikz@mode@draw draw\fi%
      }}%
      \tikz@temp
% Close the scope
   \pgfsys@endscope
  }

  \endgroup}

\def\braid@start{%
  \@ifnextchar[{\braid@start@opt}{\braid@start@noopt}%
}

\def\braid@start@opt[#1]{%
  \pgfkeys{/pgf/braid/.cd,#1}\braid@start@noopt}

\def\braid@start@noopt{%
    \let\braid@options\tikz@options
  \setcounter{braid@strands}{\pgfkeysvalueof{/pgf/braid/number of strands}}%
    \setcounter{braid@level}{-1}%
    \let\braid@label\@empty
      \let\braid@floors\@empty
    \braid@width=\pgfkeysvalueof{/pgf/braid/width}
    \braid@height=\pgfkeysvalueof{/pgf/braid/height}
    \braid@eh=\pgfkeysvalueof{/pgf/braid/border height}
    \braid@height=-\braid@height
    \braid@eh=-\braid@eh
    \braid@increase@leveltrue
    \braid@process
}

\newdimen\braid@width
\newdimen\braid@height
\newdimen\braid@tx
\newdimen\braid@ty
\newdimen\braid@nx
\newdimen\braid@ny
\newdimen\braid@cy
\newdimen\braid@dy
\newdimen\braid@eh

\newif\ifbraid@increase@level

\let\braid@style\pgfutil@empty
\let\braid@floors@style\pgfutil@empty
\def\braid@over@cross{1}

\newcounter{braid@level}
\newcounter{braid@strands}
\pgfkeys{
    /tikz/braid/.search also={/pgf},
    /pgf/braid/.search also={/pgf,/tikz},
    /pgf/braid/.cd,
    number of strands/.initial=0,
    height/.initial=1cm,
    width/.initial=1cm,
    border height/.initial=.25cm,
    floor command/.code={%
      \def\braid@render@floor{#1}%
    },
    style strand/.code 2 args={%
      \expandafter\def\csname braid@options@strand@#1\endcsname{#2}
    },
    style floor/.code 2 args={%
      \expandafter\def\csname braid@options@floor@#1\endcsname{#2}
    },
    style floors/.code={%
      \def\braid@floors@style{#1}
    }
}
%    \end{macrocode}
% \iffalse
%</package>
% \fi
%
% \Finale

\endinput
